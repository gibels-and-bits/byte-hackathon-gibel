'use client';

import React, { useEffect, useRef, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import { ConcreteReceiptInterpreter } from '../../interpreter';
import { ConcreteReceiptDSL } from '../../interfaces/receipt-models';

export default function PrintPage() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const searchParams = useSearchParams();
  
  useEffect(() => {
    // Get DSL from URL parameters
    const encodedDSL = searchParams.get('dsl');
    
    if (!encodedDSL) {
      setError('No receipt data found. Please go back and try again.');
      setIsLoading(false);
      return;
    }
    
    try {
      // Decode base64 DSL
      const dslString = atob(encodedDSL);
      const dsl: ConcreteReceiptDSL = JSON.parse(dslString);
      
      console.log('Print page - Decoded DSL:', dsl);
      
      // Try to find canvas with retries
      let retries = 0;
      const maxRetries = 10;
      
      const tryRenderReceipt = () => {
        if (canvasRef.current) {
          console.log('Print page - Canvas found, executing interpreter');
          const interpreter = new ConcreteReceiptInterpreter(canvasRef.current);
          interpreter.execute(dsl);
          setIsLoading(false);
          
          // Auto-trigger print dialog after a short delay
          setTimeout(() => {
            window.print();
          }, 500);
        } else if (retries < maxRetries) {
          retries++;
          console.log(`Print page - Canvas not found, retry ${retries}/${maxRetries}`);
          setTimeout(tryRenderReceipt, 100);
        } else {
          console.error('Print page - Canvas not found after retries');
          setError('Failed to initialize receipt display.');
          setIsLoading(false);
        }
      };
      
      // Start trying after a short delay
      setTimeout(tryRenderReceipt, 200);
    } catch (err) {
      console.error('Print page - Error:', err);
      setError('Failed to render receipt. Please go back and try again.');
      setIsLoading(false);
    }
  }, [searchParams]);
  
  return (
    <div className="min-h-screen bg-white print:bg-white">
      {/* Print styles */}
      <style jsx global>{`
        @media print {
          body {
            margin: 0;
            padding: 0;
          }
          .no-print {
            display: none !important;
          }
          .print-only {
            display: block !important;
          }
        }
        @media screen {
          .print-only {
            display: none;
          }
        }
      `}</style>
      
      {/* Screen view header */}
      <div className="no-print bg-gray-900 text-white p-4 flex justify-between items-center">
        <h1 className="text-xl font-semibold">Receipt Preview</h1>
        <div className="flex gap-2">
          <button
            onClick={() => window.print()}
            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded text-sm transition-colors"
          >
            Print Receipt
          </button>
          <button
            onClick={() => window.close()}
            className="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded text-sm transition-colors"
          >
            Close
          </button>
        </div>
      </div>
      
      {/* Receipt display */}
      <div className="flex justify-center p-8 print:p-0">
        {error ? (
          <div className="text-red-600">{error}</div>
        ) : (
          <>
            {isLoading && (
              <div className="absolute text-gray-600">Loading receipt...</div>
            )}
            <div className={`shadow-lg print:shadow-none ${isLoading ? 'opacity-0' : 'opacity-100'}`}>
              <canvas
                ref={canvasRef}
                width={384}
                height={1200}
                className="block bg-white"
                style={{ 
                  maxWidth: '100%',
                  height: 'auto'
                }}
              />
            </div>
          </>
        )}
      </div>
      
      {/* Print-only footer */}
      <div className="print-only text-center text-xs text-gray-500 mt-4">
        Generated by ReceiptCraft
      </div>
    </div>
  );
} 